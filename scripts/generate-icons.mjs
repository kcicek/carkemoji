#!/usr/bin/env node
import sharp from 'sharp';
import { mkdirSync, existsSync, writeFileSync } from 'fs';
import { resolve } from 'path';

// Simple SVG source (emoji wheel style) - replace with your logo.svg if desired
const svg = ({ size, radius = 48 }) => `<?xml version="1.0"?>
<svg width="${size}" height="${size}" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="g" x1="0" y1="0" x2="1" y2="1">
      <stop offset="0%" stop-color="#6366f1"/>
      <stop offset="100%" stop-color="#14b8a6"/>
    </linearGradient>
  </defs>
  <rect x="0" y="0" width="100" height="100" rx="18" fill="url(#g)"/>
  <text x="50" y="58" font-size="50" text-anchor="middle" dominant-baseline="middle">ðŸŽ¯</text>
</svg>`;

const sizes = [192, 512];
const outDir = resolve('public', 'icons');
if (!existsSync(outDir)) mkdirSync(outDir, { recursive: true });

async function generate() {
  for (const size of sizes) {
    const base = sharp(Buffer.from(svg({ size })));
    const filename = `icon-${size}.png`;
    await base.png({ compressionLevel: 9 }).resize(size, size).toFile(resolve(outDir, filename));
    // Maskable: add safe area transparent padding (8%)
    const safe = Math.round(size * 0.84);
    const pad = Math.round((size - safe) / 2);
    const maskBuf = await base
      .resize(safe, safe)
      .extend({ top: pad, bottom: pad, left: pad, right: pad, background: { r: 0, g: 0, b: 0, alpha: 0 } })
      .png({ compressionLevel: 9 })
      .toBuffer();
    await sharp(maskBuf).toFile(resolve(outDir, `maskable-${size}.png`));
  }
  // Simple readme reminder
  writeFileSync(resolve(outDir, 'README.txt'), 'Generated by scripts/generate-icons.mjs. Replace svg logic for custom artwork.');
  console.log('Icons generated ->', outDir);
}

generate().catch(e => { console.error(e); process.exit(1); });
